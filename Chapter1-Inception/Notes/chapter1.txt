
///////////////// HTML <!DOCTYPE> DECLARATION /////////////////

As the name suggests, <!DOCTYPE> is used in HTML to specify the type of document. It is the first line of code and appears above the <html> tage.
    The <!DOCTYPE HTMLT> declaration is an instruction to the browser about what version of HTML the page is written in. This ensures that the web
page is parsed in the same way by different browsers. 

///////////////// EMMET /////////////////

EMMET is a plugin for editors that allows for faster and more efficient HTML and CSS coding. It allows developers to write HTML and CSS code using 
Shorthand notation, which is then expanded into full code by the plugin.
    EMMET can be used with HTML by installing the plugin in a text editor and then using the shorthand elements, nesting elements, adding classes 
and IDs, adding attributes, and more.
    The main benefit of using Emmet with html is increased productivity and faster coding. Emmet also has lot of built-in snippets and other 
features that can help to speed up the development process.

///////////////// Library V/S Framework /////////////////

Developers often to use the terms "library" and "framework" interchangeably. But there is a difference.

Both frameworks and libraries are code written by someone else that is used to help solve common problems.

The technical difference between a framework and a library lies in a term called inversion of control.
    When you use a library, you're in charge of the flow of the application. You are choosing when and where to call the library. When you use a 
framework, the framework is in charge of the flow. It provides some places for you to plug in your code, but it calls the code you plugged in as 
needed.

In summary
ðŸ‘‰ Framework and libraries are both code written by someone else that helps you perform some common tasks in a less verbose way.
ðŸ‘‰ A framework inverts the control of the program. It tells the developer what they need. A library doesn't. The programmer calls library where 
   and when they need it.
ðŸ‘‰ The degree of freedom a library or framework gives the developer will dictate how "opinionated" it is.

///////////////// CDN /////////////////

A Content Devilvery Network, abbreviated as CDN is an indispensable part of most mordern websites and applications.

CDN is a globally distributed network consisting of servers that are capable of providing faster performance, lesser load time, and advanced
security to website while publishing their content.

Application Example: Let us assume you have created an e-Commerce website for your store and hosted it on a server in California. The content to 
be displayed on your website, be it textual or image, or video, has to be loaded to the user's device upon request irrespective of where they 
are located.
    Now, a user in Rotterdam is requesting for the resources to be displayed on your website, which is called from the server situated in 
California. Owing to the distance of about 5435 miles between the server in California and the user in Rotterdam, a few hundred milliseconds get
added to the load time, which frustrates the end users and even impacts the search engine ranking of your website. This is where CDN unfolds its 
potentials.

Benefits of CDN
ðŸ‘‰  Faster loading time: Recall that CDN is a globally distributed network of servers. Now, these servers are different geographic loacations 
    spread across the world and called CDN PoPs(Point of presence). Instead of delivering website resources from a server hosted in a cornor of 
    world, CDN PoPs that is closest to the user's geographic location deliver your website content to the user's screen more quickly.
ðŸ‘‰  Website security: Since the CDN PoP is in the first layer of receiving incoming traffic, it masks your actual server under serveral layers.
ðŸ‘‰  Bandwidth cost reduction: Bandwidth consumption is a major concern for many websites of today. Through caching and other optimization 
    techiques, CDN pulls less data than the original server would provide. 

Type of CDN
ðŸ‘‰ Push CDN: Web content is pushed proactively from your hosted server to the CDN PoP nested near your end-user location. When the end-user 
    requests web resources, the nearest CDN has a neat package populated with the web content. It then seamlessly delivers them to the browser.
ðŸ‘‰ Pull CDN: When it comes to pull CDN, the web content is cached in the nearest PoP server only after the first request has been made. Instead 
    of calling the server every time, during the first request, the data is actually pulled from the hosted server and cached at CDN PoP servers.
