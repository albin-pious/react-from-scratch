
///////////////// HTML <!DOCTYPE> DECLARATION /////////////////

As the name suggests, <!DOCTYPE> is used in HTML to specify the type of document. It is the first line of code and appears above the <html> tage.
    The <!DOCTYPE HTMLT> declaration is an instruction to the browser about what version of HTML the page is written in. This ensures that the web
page is parsed in the same way by different browsers. 

///////////////// EMMET /////////////////

EMMET is a plugin for editors that allows for faster and more efficient HTML and CSS coding. It allows developers to write HTML and CSS code using 
Shorthand notation, which is then expanded into full code by the plugin.
    EMMET can be used with HTML by installing the plugin in a text editor and then using the shorthand elements, nesting elements, adding classes 
and IDs, adding attributes, and more.
    The main benefit of using Emmet with html is increased productivity and faster coding. Emmet also has lot of built-in snippets and other 
features that can help to speed up the development process.

///////////////// Library V/S Framework /////////////////

Developers often to use the terms "library" and "framework" interchangeably. But there is a difference.

Both frameworks and libraries are code written by someone else that is used to help solve common problems.

The technical difference between a framework and a library lies in a term called inversion of control.
    When you use a library, you're in charge of the flow of the application. You are choosing when and where to call the library. When you use a 
framework, the framework is in charge of the flow. It provides some places for you to plug in your code, but it calls the code you plugged in as 
needed.

In summary
üëâ Framework and libraries are both code written by someone else that helps you perform some common tasks in a less verbose way.
üëâ A framework inverts the control of the program. It tells the developer what they need. A library doesn't. The programmer calls library where 
   and when they need it.
üëâ The degree of freedom a library or framework gives the developer will dictate how "opinionated" it is.

///////////////// CDN /////////////////

A Content Devilvery Network, abbreviated as CDN is an indispensable part of most mordern websites and applications.

CDN is a globally distributed network consisting of servers that are capable of providing faster performance, lesser load time, and advanced
security to website while publishing their content.

Application Example: Let us assume you have created an e-Commerce website for your store and hosted it on a server in California. The content to 
be displayed on your website, be it textual or image, or video, has to be loaded to the user's device upon request irrespective of where they 
are located.
    Now, a user in Rotterdam is requesting for the resources to be displayed on your website, which is called from the server situated in 
California. Owing to the distance of about 5435 miles between the server in California and the user in Rotterdam, a few hundred milliseconds get
added to the load time, which frustrates the end users and even impacts the search engine ranking of your website. This is where CDN unfolds its 
potentials.

Benefits of CDN
üëâ  Faster loading time: Recall that CDN is a globally distributed network of servers. Now, these servers are different geographic loacations 
    spread across the world and called CDN PoPs(Point of presence). Instead of delivering website resources from a server hosted in a cornor of 
    world, CDN PoPs that is closest to the user's geographic location deliver your website content to the user's screen more quickly.
üëâ  Website security: Since the CDN PoP is in the first layer of receiving incoming traffic, it masks your actual server under serveral layers.
üëâ  Bandwidth cost reduction: Bandwidth consumption is a major concern for many websites of today. Through caching and other optimization 
    techiques, CDN pulls less data than the original server would provide. 

Type of CDN
üëâ Push CDN: Web content is pushed proactively from your hosted server to the CDN PoP nested near your end-user location. When the end-user 
    requests web resources, the nearest CDN has a neat package populated with the web content. It then seamlessly delivers them to the browser.
üëâ Pull CDN: When it comes to pull CDN, the web content is cached in the nearest PoP server only after the first request has been made. Instead 
    of calling the server every time, during the first request, the data is actually pulled from the hosted server and cached at CDN PoP servers.

A CDN (Content Delivery Network) link typically consists of several components that work together to deliver content efficiently across the 
internet. Here's a breakdown of what you might find in a CDN link:

üëâ Protocol: The protocol used for communication, usually either "http://" or "https://".

üëâ CDN Domain: The domain name or subdomain of the CDN provider. For example, if you are using a CDN service like Cloudflare, the link might 
    include their domain, such as "cdn.cloudflare.com".

üëâ Resource Path: The path to the specific resource or file you are requesting. This could include directories and filenames.

üëâ Versioning or Cache Busting: Some CDN links include version numbers or unique identifiers to ensure that the latest version of a file is 
    served. This helps in cache management and ensures that users receive the most recent content when changes are made.

üëâ File Extension: The extension of the file being requested, indicating the type of content (e.g., .css for stylesheets, .js for JavaScript, 
    .jpg or .png for images).

///////////////// Why React called React /////////////////

React is JavaScript library for building user interfaces, that was developed by Facebook. It was originally released in 2013 and has since one of 
the most popular libraries for building web applications.
    React is a JavaScript library for building user interfaces. It was developed by Facebook, and the name "React" was chosen because it is meant 
to help developers built user interfaces that are fast and responsive, or 'reactive'. The library was designed to 'react' to changes in data.
    When data in a React application changes, the components that depend on that data are automatically updated, which allows for efficient and 
seamless updates to the user interface. The name ‚ÄúReact‚Äù reflects this reactive nature of the library.
    The idea behind React is to build reusable components that can be rendered on the front-end, rather than writing a new piece of code every time
you need to display something on the screen. This makes it easier and more efficient to build complex user interfaces.

///////////////// Crossorigin in script tag /////////////////

The HTML <script> crossorigin Attribute is used for loading an external script into their domain from a third party server or another domain with 
the support of HTTP CORS Request. This attribute is used to protect sensitive information from the third party when fetching out the results.
protect sensitive information from the third party when fetching out the results.
    Cross-Origin Resource Sharing(CORS) is a tool that allows web pages requesting for resources from another domain that is outside of their own 
domain. It is also used for managing cross-origin requests which is a request for a resource from an outside domain.

Syntax: <script crossorigin="anonymous | use-credential">

Attribute values
üëâ anonymous: It has a default value. It defines a CORS request will be sent without passing the credential information.
üëâ use-credential: A cross-origin request will be sent with credential, cookies, and certificate.
Note: This attribute is only valid for use if we try to fetch the resources from the third party domain.

///////////////// React and ReactDOM /////////////////

React and ReactDOM are both fundamental parts of the React ecosystem, but they serve distinct roles.

React is, at its core, a library for building user interfaces. It introduces the concept of components, which allow developers to craft reusable 
and self-contained UI elements. These components define how a user interface should appear based on given inputs (props and state). React operates 
with a virtual representation of the DOM, known as the Virtual DOM, which is an abstraction of the actual browser‚Äôs DOM. By working with this 
abstraction, React can determine the most efficient way to update the browser‚Äôs DOM when data changes, leading to efficient and performant UI 
updates.

ReactDOM, on the other hand, acts as the glue between React‚Äôs Virtual DOM and the actual browser‚Äôs DOM. It provides the means to render React 
components into the DOM. The primary method it offers is `ReactDOM.render()`, which is used to take a React component and render it into a 
specified DOM node. Additionally, ReactDOM provides utilities for directly interacting with the DOM, like `findDOMNode()` (though its use is often 
discouraged in favor of more ‚ÄúReact-ish‚Äù approaches). Importantly, ReactDOM is specific to web browsers.

The reason for this separation is React‚Äôs design philosophy to be platform-agnostic. While ReactDOM deals with web-specific rendering, there are 
other renderers like React Native (for mobile apps) or ReactVR (for virtual reality) that leverage the core React library to target different 
platforms. By decoupling the core definitions of components from the platform-specific rendering logic, React becomes a versatile solution for 
various environments.

///////////////// Dev. CDN && Prod. CDN /////////////////

Both React and ReactDOM both are available over a CDN.

first One:
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
The versions above are only meant for development, and are not suitable for production. 

second One:
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
Minified and optimized production versions of React are available at:

When using React with CDN links, it‚Äôs important to understand the differences between the development (dev) and production (prod) links and when to
use them appropriately.

Development (Dev) Link:
üëâ The development link is typically used during the development phase of your application.
üëâ It includes additional debugging tools, warnings, and helpful error messages.
üëâ It is larger in file size and may negatively impact the performance of your application.
üëâ It is not optimised for production use.

Production (Prod) Link:
üëâ The production link is meant for deploying your application in a production environment.
üëâ It excludes development-specific tools, warnings, and error messages.
üëâ It is smaller in file size, which improves the performance of your application.
üëâ It is optimized for production use.

Using the development link in a production environment can lead to unnecessary debugging information being sent to the client, which may be a 
security risk and can negatively affect performance.

Conversely, using the production link during development may make it difficult to identify and debug issues because you won‚Äôt get helpful error
messages and warnings.

The development link is used during development to benefit from debugging tools and warnings, and you can switch to the production link when
deploying your application to ensure optimal performance and security.

///////////////// Async v/s Defer /////////////////

When you load a webpage then there are two major things happening in your browser.
üëâ HTML parsing
üëâ The loading of the scripts

The loading of the scripts contain two parts fetch script from the network and execute.

Normal Scenario - Without Attribute
  <script src="" />
If your browser is parsing the HTML line by line suddenly encounters a script tag at a point browser has stops parsing at the point and fetch the
script into the browser and run it there in then and the browser is continueous to start after the script is completly execute. It's not a good 
partice.

Async Attribute
  <script async src="" />
While using the async attribute meanwhile HTML parsing is going on any of the script with async tag fetch form the network asyncronounsly along 
with the HTML parsing.
    So as soon as the scripts are fetched and are available in the browser the HTML parsing is stops and the scripts are executed then there. When
execution of the scripts completed the HTML parsing is continueous.
    HTML parsing goes on and the script fetch work on parallel as soon as the script is fetch are available in the browser then scripts are 
executed and only then HTML parsing continueous. At the time of script execution the HTML parsing is blocked/paushed, that is another way of 
executing the scripts.

Defer Attribute
  <script defer src="" />
In case of defer the HTML parsing goes on and script tag fetch in parallel and the script tag only executes when HTML parsing is fully completes.
So its doesn't matter when the scripts are available in browser unlike async attribute it will only started executing the scripts only HTML 
parsing is completed.

These are how scripts are loaded in browser when you put defer attribute, async attribute or not put any attribute. But the important question is 
when should I use what before? decieding what to use when we should first not it down important thing,
   The important thing is the async attribute doesn't guarantee about the order of execution of scripts but defer does. What that means? If you 
put async attribute in multiple script tag suppose you have multiple scripts which are depended on each other, some scripts are depened on each 
other and some scripts are depend on each other you have multiple depended scripts. When using the async tag doesn't guarantee that these 
scripts will executed in particular order in that case of you should use probably prefer 'defer'. Another example is suppose you have to load 
some external scripts lets take a example of google analytical scripts or other analytical scripts which are quiet modular and are independant on
normal code so in that case it makes sense to use async attribute and not use a defer otherwise mostly wise to use defer maintains the order of 
execution of the scripts. So while your HTML parsing is going on the scripts are fetch from network and only executes when HTML parsing is
completed.   

