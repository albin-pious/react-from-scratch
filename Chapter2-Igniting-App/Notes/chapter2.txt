///////////////// ReactJS /////////////////

ReactJS is a library that has gained significant traction in recent years.Its core concepts, such as components, JSX, and virtual DOM, have 
revolutionized the way we build user interfaces. ReactJS offers advantages like reusability, performance optimization, and a component-based 
architecture that promotes modular development.

Exploring Other Front-End Frameworks

While ReactJS enjoys widespread adoption, it‚Äôs essential to explore alternatives to make an informed decision. Angular, a comprehensive framework 
by Google, provides a full-featured ecosystem and powerful tooling. Vue.js, on the other hand, focuses on simplicity, ease of use, and a gentle 
learning curve. Vue.js, on the other hand, focuses on simplicity, ease of use, and a gentle learning curve. It‚Äôs important to consider other 
notable frameworks like Ember.js, Backbone.js, and Svelte as well, as they have their own unique strengths and use cases.

Comparing ReactJS with Angular

ReactJS and Angular are both powerful frameworks but have fundamental differences. ReactJS offers a more flexible and lightweight approach, 
focusing primarily on the view layer. Angular, on the other hand, provides a complete solution with a steep learning curve but offers powerful 
features like dependency injection and a comprehensive ecosystem. Choosing between ReactJS and Angular depends on factors like project complexity, 
team expertise, and scalability requirements.

Comparing ReactJS with Vue.JS

ReactJS and Vue.js share similarities in their component-based approach and use of a virtual DOM. Vue.js, however, offers a more gradual learning 
curve, making it suitable for both small and large-scale projects. ReactJS excels in performance and is backed by a strong community, while Vue.js 
boasts a flexible and intuitive syntax. Evaluating project requirements, scalability needs, and developer preferences is crucial in choosing 
between ReactJS and Vue.js.

Choosing the right front-end framework is a critical decision that impacts the success of your web development project. ReactJS, along with other 
frameworks like Angular and Vue.js, offers distinct advantages and use cases. By understanding the strengths and trade-offs of each framework and 
evaluating project-specific factors, you can make an informed decision. Remember, there is no one-size-fits-all solution, and it‚Äôs important to 
experiment and adapt based on your unique project requirements and team capabilities.

///////////////// Bundler /////////////////

A bundler is a tool that puts together all your JavaScript code and its dependencies and throws a new JavaScript output file with everything 
merged, ready for the web, commonly known as the bundle file.

A bundler in React is a tool that allows developers to package their code into a single file or bundle. This bundle can then be used to run the
application in the browser. Bundlers are used to reduce the size of the code and improve the performance of the application. Common bundlers used
with React are Webpack and Parcel.
   
   What do bundlers do?

They allow developers to bundle their code, including libraries and frameworks, into a single file. This makes it easier to deploy and run the
application, as well as making the code more efficient and maintainable.
    In other words, a bundler is a tool that helps you manage the dependencies and assets of your React application, and package them into a 
single file (or a few files) that can be served to the browser.

 üè≥Ô∏è Pros üè≥Ô∏è

üëå Optimization: Bundlers allow you to optimize your application by minifying, compressing and tree shaking your code, which can make it faster 
                 to load and run.

üëå Asset management: Bundlers can handle different types of assets, such as images, fonts, and styles. It also allow to transpile code like 
                    javascript, scss or sass.

üëå Code splitting: Bundlers enable you to split your code into multiple chunks that can be loaded on demand, which can make your application more 
                   efficient by only loading the code that is necessary for the current user.

üëå Modularity: Bundlers allow you to use a modular approach to your code, by using import/export statements to organize your code in a way that 
                makes it easy to reuse and manage.

üëå Cross-browser compatibility: Some bundlers can provide cross-browser compatibility through a set of loaders, which make sure that the code works 
                                well across different browsers.

  üè¥‚Äç‚ò†Ô∏è Cons üè¥‚Äç‚ò†Ô∏è

üëé Complexity: The configuration and setup of a bundler can be complex and may require a lot of time to understand, especially for developers new 
                to React.

üëé Performance cost: The extra step of bundling can add some extra overhead to the build process and increase the time it takes to develop, test, 
                     and deploy your application. This can be especially noticeable when working on large projects or when using features that 
                     require more complex processing like code splitting or transpiling.

üëé Additional Dependency: You will need to maintain and update the bundler and its associated configuration. This can be a hassle if the tool or 
                           the way it's used changes rapidly or there is not good documentation or community support.

üëé Learning Curve: Depending on the complexity of the bundler, you may have to spend some extra time to get familiar with its features and how to 
                   set it up properly.

üëé Debugging: Debugging can be more difficult when using a bundler because the code that runs in the browser is transformed and minified, making 
               it harder to understand.

In summary, using a bundler can make it easier to organize and optimize your React application, but it can also add some extra complexity and 
overhead. It may take some extra time to set up and maintain, but it can provide many benefits in terms of performance and modularity. It's best 
to weight the pros and cons carefully, depending on your project's needs and constraints, and choose the tool that works best for you.

1Ô∏è‚É£ Vite

Vite is a build in tool created by Evan You, the creator of the Vue.js framework to provide a faster and leaner development experience for modern 
web projects. It is the next-generation frontend tooling that provides a lightning-fast dev server, bundling and resolves the server cold start 
issue.
    Before ES modules, developers had no native mechanism for modularizing JavaScript codes. Bundling is the process that crawls and concatenates 
Javascript modules into files that can run in the browser. Webpack, Rollup and Parcel are the most commonly used bundling tools. These tools have 
a lots of performance issues while dealing with large scale projects that contains thousands of modules. It can often take up an unreasonably 
long wait to start a dev server, and file edits can take a couple of seconds to be reflected in the browser.
    Vite address these issues with the use of native ES modules in the browser. It takes advantage of the native ES modules supported in modern 
browsers and runs a server that compiles and serves any required dependencies on the fly via ES modules. This approach allows Vite to process and 
provide only the required code. It is lightning fast as it uses esbuild for pre-bundling dependencies during the development. esbuild is an 
extremely fast JavaScript bundler written in the Go language.

2Ô∏è‚É£ Webpack

Webpack is a powerful and popular open-source module bundler used primarily in modern web development. It allows developers to bundle, transform, 
and manage assets and dependencies in a project, making it easier to deliver optimized and performant web applications. While Webpack is commonly 
associated with JavaScript, it can also process various other assets like CSS, images, and fonts.

  How Webpack works

Webpack works by traversing the dependency graph starting from one or multiple entry points specified in the configuration. It analyzes the import 
and require statements in these entry files and recursively follows the dependencies, creating a complete graph of all modules required to run 
the application.
    Once the dependency graph is created, Webpack uses loaders to preprocess the different types of files in the application. For example, it can 
use Babel loader to transpile modern JavaScript (ES6+) code to older versions for browser compatibility. Similarly, it can use CSS and image 
loaders to handle CSS and image assets.
    Webpack then bundles all these processed modules into one or more output files, typically a single JavaScript file containing all the 
application code. By doing so, Webpack optimizes the loading process and reduces the number of network requests required to fetch the 
application‚Äôs resources.

3Ô∏è‚É£ Parcel

Parcel works great for building single or multi-page React applications. It includes a first-class development experience with Fast Refresh, and 
supports JSX, TypeScript, Flow, and many styling methodologies out of the box.

‚û°Ô∏è JSX

Parcel supports JSX automatically when it detects you are using React. If you‚Äôre using React 17 or later, it also automatically enables the modern 
JSX transform, which means you don't even need to import React for JSX to work, as you can see in App.js in the above example.

‚û°Ô∏è Fast Refresh

Parcel has first-class support for React Fast Refresh, which gives you quick feedback as you edit your code without needing to reload the page. 
In most cases, it can preserve component state as code is edited, even if you make an error. In most cases, it can preserve component state as 
code is edited, even if you make an error. See the Hot reloading docs for details on how this works.

‚û°Ô∏è Dev Server

Parcel‚Äôs builtin dev server is automatically started when you run the default parcel command, which is a shortcut for parcel serve. By default, it 
starts a server at http://localhost:1234. If port 1234 is already in use, then a fallback port will be used. After Parcel starts, the location 
where the dev server is listening will be printed to the terminal.

‚û°Ô∏è Hot reloading

‚û°Ô∏è Development target

‚û°Ô∏è Lazy mode

‚û°Ô∏è Caching

‚û°Ô∏è HTTPS

‚û°Ô∏è API proxy

  Zero config

Start with an HTML file. Add a <script> tag. Maybe some CSS. How about TypeScript? SASS? Images? No problem. Parcel works out of the box just as 
you'd expect.
    Parcel supports many languages and file types out of the box, from web technologies like HTML, CSS, and JavaScript, to assets like images, 
fonts, videos, and more. And when you use a file type that isn't included by default, Parcel will automatically install all of the necessary 
plugins and dev dependencies for you!

///////////////// Transitive Dependency /////////////////

    When we have build a production ready app it has big minification, bundling, which is cleaning up our code, which was use image compression, 
which uses alot of things for minifying our file, then what will happen is we just do lot of things we have bundling, minification, optimization, 
caching, differential bundling and so many things we have to do soem dependency on it. That dependency depends on other dependecy, those are 
depend on other dependecy. This is a dependency tree and it called transitive dependency.

///////////////// Browserlist /////////////////

Browserlist is a tool that allows specifying which browsers should be supported in your frontend app by specifying "queries" in a config file. 
It's used by frameworks/libraries such as React,Angular and Vue, but not limited to them.

///////////////// NPM - a JavaScript package manager /////////////////

    A dependency is a third-party bit of software that was probably written by someone else and ideally solves a single problem for you. A web 
project can have any number of dependencies, ranging from none to many, and your dependencies might include sub-dependencies that you didn't 
explicitly install ‚Äî your dependencies may have their own dependencies.
    Npm is the standard package manager of the Node.js ecosystem. It‚Äôs the most extensive online package repository, 
containing over one-million packages. Also, it‚Äôs a command-line interface tool used by developers to manage their Node.js projects. Developers all 
around the world use npm to share their software. React, Vue, Express, and Angular are some great examples.

///////////////// Parcel/Webpack /////////////////

Parcel and Webpack are both popular bundling tools used in web development. Here are some key differences between the two.

ü§î Configuration
    Webpack requires a configuration file (webpack.config.js) to define its behavior, whereas Parcel does not require any configuration by default. 
    Parcel automatically detects and bundles the required assets without the need for explicit configuration, making it easier and quicker to set 
    up.

ü§î Zero Configuration
    As mentioned earlier, Parcel does not require any configuration by default, making it a good choice for beginners or for simple projects where 
    ease of use is a priority. On the other hand, Webpack offers more customization options through its configuration file, allowing developers to 
    fine-tune the bundling process to suit specific project requirements.

ü§î Asset Types
    Webpack is more versatile when it comes to handling different types of assets. It provides loaders for various file types, like JavaScript, 
    CSS, images, and fonts, enabling developers to process and optimize these assets. Parcel, on the other hand, supports a wide range of asset 
    types out-of-the-box without the need for additional configuration or loaders.

ü§î Hot Module Replacement (HMR)
    HMR is a feature that allows developers to update the modules in the browser without refreshing the entire page. While both Parcel and Webpack 
    support HMR, Webpack provides more fine-grained control and customization options over how the updates are handled. Webpack allows developers 
    to define custom HMR behavior through Hot Module Replacement API, whereas Parcel handles HMR automatically without requiring any additional 
    configuration.

ü§î Performance
    Parcel is often praised for its fast bundling speed, especially for small to medium-sized projects. It achieves this by utilizing caching and 
    parallelizing the bundling process. Webpack, on the other hand, offers more advanced optimization techniques like tree-shaking and 
    code-splitting, which are beneficial for larger and more complex projects, but may impact build times.

ü§î Community and Ecosystem
    Webpack has been around for a longer time and has a larger and more mature ecosystem. It has a wide range of plugins and loaders available, 
    allowing developers to extend its functionality according to their needs. The community support and documentation for Webpack are also 
    extensive. Parcel, while gaining popularity, has a smaller ecosystem compared to Webpack, which means fewer choices when it comes to extending 
    or customizing the build pipeline.  

In summary, Parcel offers zero-configuration setup and faster bundling speed, making it great for simple projects or beginners, while Webpack 
provides more advanced customization options, better support for different asset types, and a larger community ecosystem, making it suitable for 
more complex projects. 

///////////////// .parcel-cache /////////////////

The .cache folder (or .parcel-cache in parcel v2) stores information about your project when parcel builds it, so that when it rebuilds, it 
doesn't have to re-parse and re-analyze everything from scratch. It's a key reason why parcel can be so fast in development mode. I think 
committing it to git would be a bad idea - it would add a large number of (unnecessary) changes to your commit history, and it could easily get 
out-of-sync with the code that generated it.

///////////////// npx /////////////////

The command npm is used to download JavaScript packages from Node Package Manager, and npx is used to execute JavaScript packages downloaded this 
way. An npm package runner ‚Äî helps to execute packages without installing explicitly.

///////////////// dependencies vs devDependencies /////////////////

üéàDependencies
    In the package.json file, there is an object called dependencies and it consists of all the packages that are used in the project with its 
version number. So, whenever you install any library that is required in your project that library you can find it in the dependencies object. 
syntax: npm install <package name>

üéàDev Dependencies
    In package.json file, there is an object called as dev Dependencies and it consists of all the packages that are used in the project in its 
development phase and not in the production or testing environment with its version number. So, whenever you want to install any library that is 
required only in your development phase then you can find it in the dev Dependencies object. 
syntax: npm install <package name> --save-dev   |||| instead of --save-dev we can use -D.

üéàPeer Dependencies
   In package.json file, there is an object called as peerDependencies and it consists of all the packages that are exactly required in the 
project or to the person who is downloading and the version numbers should also be the same. That is the reason they were named as 
peerDependencies. The best example is ‚Äòreact‚Äô which is common in every project to run similarly. 

///////////////// Tree Shaking /////////////////

    Reduced size of application & improved performance plays an important role in success of a software. Tree Shaking is a concept in development 
of eliminating dead code or unused code.
    Imagine your application as a tree. All the libraries, components, widgets & code represents leaves. All the unused code, imports & dead code 
represents the dead brown leaves. In order to clear dead leaves from trees you have to shake the tree to let them fall.
    By implementing tree shaking practices website performance will get improved and reduce bundle size. Tree shaking depends on the static 
structure of ES6 module syntax (import & export).
    The reason tree shaking is very important is because most packages installed don‚Äôt really need all dependencies & this results in importing 
full packages, however what really needed is a small part of that package.

///////////////// Hot Module Replacement (HMR) for a React App /////////////////

    Webpack HMR seems to be reliable. Whereas React Hot Loader from Dan Abramov is more ambitious, but less reliable. RHL attempts to preserve 
local state in components, whereas HMR can preserve your redux store state, but won‚Äôt attempt to preserve local state that gets created by your 
component files:
    Hot-module-reloading lets us change the code of our application while maintaining our current state and position in the website. This allows 
us to do things like tweak the styling of some page of our app without having to navigate all the way back to that page each time.

///////////////// 5 superpowers of Parcel and describe any 3 of them in your own words. /////////////////

üî•Hot Module Replacement

   Hot Module Replacement (HMR) improves the development experience by automatically updating modules in the browser at runtime without needing a 
whole page refresh. This means that application state can be retained as you change small things. Parcel's HMR implementation supports both 
JavaScript and CSS assets. As you save files, Parcel rebuilds what changed and sends an update to any running clients containing the new code. 

üî•Production
  When it comes time to bundle your application for production, you can use Parcel's production mode.
parcel build entry.js
  This disables watch mode and hot module replacement so it will only build once. It also enables the minifier for all output bundles to reduce 
file size. The minifiers used by Parcel are terser for JavaScript, cssnano for CSS, and htmlnano for HTML.
  Enabling production mode also sets the NODE_ENV=production environment variable. Large libraries like React have development-only debugging 
features which are disabled by setting this environment variable, which results in smaller and faster builds for production.

üî•Image Optimization
  Parcel also includes lossless image optimization for JPEGs and PNGs by default in production mode, which reduces the size of images without 
affecting their quality. This does not require any query parameters or configuration to use. However, since the optimization is lossless, the 
size reduction possible may be less than if you use the quality query param, or use a modern format such as WebP or AVIF.

üî•Caching
   Parcel caches everything it builds to disk. If you restart the dev server, Parcel will only rebuild files that have changed since the last time 
it ran. Parcel automatically tracks all of the files, configuration, plugins, and dev dependencies that are involved in your build, and granularly 
invalidates the cache when something changes. For example, if you change a configuration file, all of the source files that rely on that 
configuration will be rebuilt.

üî•Browser Compatibility
   By default Parcel does not perform any transpilation of JavaScript syntax for older browsers. This means that if you write your code using 
modern language features, that‚Äôs what Parcel will output. You can declare your app‚Äôs supported browsers using the browserslist field in your 
package.json. When this field is declared, Parcel will transpile your code accordingly to ensure compatibility with your supported browsers.

///////////////// .gitignore /////////////////

Git is a popular version control system. It is how developers can collaborate and work together on projects. Git allows you to track the changes 
you make to your project over time. On top of that, it lets you revert to a previous version if you want to undo a change.

üéàtracked
    these are all the files or directories Git knows about. These are the files and directories newly staged (added with git add) and committed 
(committed with git commit) to the main repo.

üéàuntracked
    these are any new files or directories created in the working directory but that have not yet been staged (or added using the git add command).

üéàignored
    these are all the files or directories that Git knows to completely exclude, ignore, and not be aware of in the Git repository. Essentially, 
this is a way to tell Git which untracked files should remain untracked and never get committed.

All ignored files get stored in a .gitignore file.
Ignored files are usually build artifacts and machine generated files that can be derived from your repository source or should otherwise not be 
committed. Some common examples are:

///////////////// difference between `package.json` and `package-lock.json` /////////////////

package.json: records the minimum version you app needs. If you update the versions of a particular package, the change is not going to be 
reflected here.

package-lock.json: records the exact version of each installed package which allows you to re-install them. Future installs will be able to build 
an identical dependency tree.

///////////////// Why should I not modify `package-lock.json`? /////////////////

It reflects changes made to package.json to package-lock.json and keeps it up to date. However, this only happens if you use NPMs‚Äô CLI to make 
changes. If you manually change package.json, don‚Äôt expect package-lock.json to update. Always use the CLI commands, like install, uninstall, etc.

///////////////// What is `node_modules`? Is it a good idea to push that on git? /////////////////

node_modules is a directory created when you use npm to install dependencies for a project. It contains all the third-party packages and modules 
that your project depends on. These packages are specified in your project's package.json file. In general, it is not considered a good practice 
to push the node_modules directory to version control, such as Git. There are a few reasons for this:

‚òïSize: The node_modules directory can become quite large, especially for projects with many dependencies. Pushing these files to Git can bloat 
        your repository size, making it slow to clone and download.

‚òïRedundancy: Since node_modules contains dependencies, which can be easily installed using npm, there's no need to include these files in 
                version control. Developers can simply run npm install to fetch the required dependencies based on the information in the 
                package.json file.     
   
‚òïPortability: Different operating systems may require different binaries or compiled files for the same package. Including these 
                platform-specific files in version control may lead to issues when moving the project between different environments.

Instead of pushing the node_modules directory, it's common to include a .gitignore file in your project and list node_modules in it. This will 
ensure that Git ignores the node_modules directory and its contents when you commit changes.
    By doing this, you keep your repository clean and avoid unnecessary duplication of dependencies. When someone else clones your repository, 
they can run npm install to fetch the required dependencies based on the package.json file.

///////////////// What is the `dist` folder? /////////////////

In web development, the dist folder is the location where the final, compiled version of your project will be stored. This is the version of your 
project that you will ultimately deploy to a server. The dist folder is typically generated by a build process, which takes your source code and 
converts it into the final format that your web application will use.
    The /dist (pronounced /dehs/) is a term used to refer to a distribution. The /dist folder contains a shortened version of the source code. In 
reality, the code in /dist is what runs production web applications.

///////////////// Read about: `^-caret` and `~-tilde` /////////////////

When we open our package.json file and search for the dependency property and in there we find the packages that are listed as a nested object of 
the dependency property package-name:package-version. Now look at the package version, we find some numbers separated by three dots. 
The syntax of the npm version looks like the following: Major.Minor.Patch

Tilde(~)
    The tilde (~) notation is employed to match the latest patch version while freezing the major and minor versions. This notation is useful for 
automatically accepting bug fixes, considering that patch updates primarily address bugs.

Example: The ~1.2.0 will update all the future patch updates. We have to write just ~1.2.0 and all the next patch update dependencies. For 
example, 1.2.1, 1.2.2, 1.2.5‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶1.2.x.

Caret(^)
    It automatically updates both minor and patch updates.
Example: The ^1.2.4 will update all the future Minor and patch updates, for example, ^1.2.4 will automatically change the dependency to 1.x.x if 
any update occurs. 

///////////////// Script types in HTML /////////////////
    The <script> HTML element is used to embed executable code or data; this is typically used to embed or refer to JavaScript code. The <script> 
element can also be used with other languages, such as WebGL's GLSL shader programming language and JSON.

///////////////// `type` Attribute /////////////////
    The type attribute of the <script> element indicates the type of script represented by the element: a classic script, an import map, a 
JavaScript module, speculation rules, or a data block.

üíÄAttribute is not set (default), an empty string, or a JavaScript MIME type
    Indicates that the script is a "classic script", containing JavaScript code. Authors are encouraged to omit the attribute if the script refers 
to JavaScript code rather than specify a MIME type.

üíÄimportmap
    This value indicates that the body of the element contains an import map. The import map is a JSON object that developers can use to control 
how the browser resolves module specifiers when importing JavaScript modules.

üíÄmodule
    This value causes the code to be treated as a JavaScript module. The processing of the script contents is deferred. The charset and defer 
attributes have no effect. For information on using module, see our JavaScript modules guide. Unlike classic scripts, module scripts require the 
use of the CORS protocol for cross-origin fetching.

üíÄspeculationrules
   This value indicates that the body of the element contains speculation rules. Speculation rules take the form of a JSON object that determine 
what resources should be prefetched or prerendered by the browser. This is part of the Speculation Rules API.
    






    









